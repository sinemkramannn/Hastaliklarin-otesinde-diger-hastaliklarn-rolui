# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gQR8xUWWlqYaek1v70dUuEwyUBAhL54B
"""

from sklearn.feature_selection import VarianceThreshold
import pandas as pd
import numpy as np
import warnings
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.simplefilter(action='ignore', category=DeprecationWarning)

data = pd.read_csv('/content/drive/MyDrive/veriler.csv')

# Tarih sütunlarını datetime nesnelerine dönüştürme
date_columns = ['AnalysisDate', 'Date Of Death Year', 'Date Of Death Month', 'Start Date', 'End Date']
data[date_columns] = data[date_columns].apply(pd.to_datetime, errors='coerce')

data['DeathDuration'] = data['End Date'] - data['Start Date']  # Bu kod, iki tarih sütunu arasındaki süreyi hesaplar ve bu süreyi yeni bir sütun olan "DeathDuration" olarak ekler

# 'DeathDurationInDays' sütununu oluştur
data['DeathDurationInDays'] = data['DeathDuration'].dt.days

# İlk on satırı görüntüle
print(data[['Start Date', 'End Date', 'DeathDuration', 'DeathDurationInDays']].head(10))

data['Sex'] = data['Sex'].apply(lambda x: 1 if x == 'M' else 0)

data['AgeGroup'] = data['AgeGroup'].astype('category').cat.codes

"""# Yeni Bölüm"""

# Eksik verileri kontrol et
missing_values = data.isnull().sum()
print("Eksik Veri Sayısı:\n", missing_values)

#Eksik verileri sütun ortalaması ile doldurma
data.fillna(data.mean(), inplace=True)

data = data.drop(['Jurisdiction of Occurrence', 'AnalysisDate'], axis=1)

from sklearn.preprocessing import LabelEncoder
# Sadece 'Race/Ethnicity' sütununu seçin
race_column = data[['Race/Ethnicity']]

# 'Race/Ethnicity' sütununu label encoding uygulayın
le = LabelEncoder()
race_column['Race/Ethnicity_LabelEncoded'] = le.fit_transform(race_column['Race/Ethnicity'])

# 'Race/Ethnicity' sütununu veri setinden çıkarın
data = data.drop('Race/Ethnicity', axis=1)

# LabelEncoded sütunu veri setine ekleyin
data = pd.concat([data, race_column], axis=1)

# Güncellenmiş veri setini gösterin
print(data.head())
print(data.columns)

#Burada normalleştirme işlemi için seçme yaptık
numerical_columns = ['AllCause', 'DeathDurationInDays','Sex','Septicemia (A40-A41)', 'Malignant neoplasms (C00-C97)', 'Diabetes mellitus (E10-E14)', 'Alzheimer disease (G30)', 'Influenza and pneumonia (J09-J18)', 'Chronic lower respiratory diseases (J40-J47)', 'Other diseases of respiratory system (J00-J06,J30-J39,J67,J70-J98)', 'Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)', 'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)', 'Diseases of heart (I00-I09,I11,I13,I20-I51)', 'Cerebrovascular diseases (I60-I69)', 'COVID-19 (U071, Multiple Cause of Death)', 'COVID-19 (U071, Underlying Cause of Death)']

# Min-Max normalleştirme (manuel)
for column in numerical_columns:
    min_value = data[column].min()
    max_value = data[column].max()
    data[column] = (data[column] - min_value) / (max_value - min_value)

numerical_columns = ['AllCause','Septicemia (A40-A41)', 'Malignant neoplasms (C00-C97)', 'Diabetes mellitus (E10-E14)',
                      'Alzheimer disease (G30)', 'Influenza and pneumonia (J09-J18)',
                      'Chronic lower respiratory diseases (J40-J47)',
                      'Other diseases of respiratory system (J00-J06,J30-J39,J67,J70-J98)',
                      'Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)',
                      'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)',
                      'Diseases of heart (I00-I09,I11,I13,I20-I51)', 'Cerebrovascular diseases (I60-I69)',
                      'COVID-19 (U071, Multiple Cause of Death)', 'COVID-19 (U071, Underlying Cause of Death)']

for column in numerical_columns:
    min_value = data[column].min()
    max_value = data[column].max()
    data[column] = (data[column] - min_value) / (max_value - min_value)

# Güncellenmiş veri setini gösterin
print(data.head())

!pip install catboost

from catboost import CatBoostClassifier, Pool
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Hedef değişken olarak kullanılacak sütunu seçin
target = 'Race/Ethnicity_LabelEncoded'

# Bağımsız değişkenleri seçin
features = ['AllCause', 'NaturalCause', 'Septicemia (A40-A41)', 'Malignant neoplasms (C00-C97)',
            'Diabetes mellitus (E10-E14)', 'Alzheimer disease (G30)', 'Influenza and pneumonia (J09-J18)',
            'Chronic lower respiratory diseases (J40-J47)',
            'Other diseases of respiratory system (J00-J06,J30-J39,J67,J70-J98)',
            'Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)',
            'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)',
            'Diseases of heart (I00-I09,I11,I13,I20-I51)', 'Cerebrovascular diseases (I60-I69)',
            'COVID-19 (U071, Multiple Cause of Death)', 'COVID-19 (U071, Underlying Cause of Death)']

# Veriyi bağımsız değişkenler ve hedef değişken olarak ayırın
X = data[features]
y = data[target]

# Eğitim ve test veri setlerini oluşturun
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# CatBoost modelini oluşturun
catboost_model = CatBoostClassifier(iterations=100, depth=10, learning_rate=0.1, loss_function='MultiClass', custom_metric='Accuracy', random_state=42)

# Modeli eğitin
catboost_model.fit(X_train, y_train, eval_set=(X_test, y_test), verbose=10)

# Test veri seti üzerinde tahminler yapın
y_pred_catboost = catboost_model.predict(X_test)

# Model performansını değerlendirin
accuracy_catboost = accuracy_score(y_test, y_pred_catboost)
classification_rep_catboost = classification_report(y_test, y_pred_catboost)

# Sonuçları görüntüle
print('CatBoost Accuracy:', accuracy_catboost)
print('CatBoost Classification Report:\n', classification_rep_catboost)

import pandas as pd
import matplotlib.pyplot as plt

# Veriyi ölüm tarihine göre gruplayarak toplam ölüm sayılarını bulma
data['Date Of Death Year'] = pd.to_datetime(data['Date Of Death Year'].astype(str), errors='coerce')  # Tarih sütununu datetime tipine çevirme

total_deaths_by_year = data.groupby('Date Of Death Year')['AllCause'].sum().reset_index()

# Veriyi indeksleme
total_deaths_by_year.set_index('Date Of Death Year', inplace=True)

# Zaman serisi grafiği çizme
plt.figure(figsize=(12, 6))
plt.plot(total_deaths_by_year.index, total_deaths_by_year['AllCause'], marker='o')
plt.title('Yıllara Göre Toplam Ölüm Sayıları')
plt.xlabel('Yıl')
plt.ylabel('Toplam Ölüm Sayısı')
plt.grid(True)
plt.show()



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

# Hedef değişken olarak kullanılacak sütunu seçin
target = 'Sex'

# Veri setinizdeki bağımsız değişkenleri ve hedef değişkeni seçin
features = ['AllCause','NaturalCause','Septicemia (A40-A41)', 'Malignant neoplasms (C00-C97)',
            'Diabetes mellitus (E10-E14)', 'Alzheimer disease (G30)', 'Influenza and pneumonia (J09-J18)',
            'Chronic lower respiratory diseases (J40-J47)',
            'Other diseases of respiratory system (J00-J06,J30-J39,J67,J70-J98)',
            'Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)',
            'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)',
            'Diseases of heart (I00-I09,I11,I13,I20-I51)', 'Cerebrovascular diseases (I60-I69)',
            'COVID-19 (U071, Multiple Cause of Death)', 'COVID-19 (U071, Underlying Cause of Death)']

# Veriyi bağımsız değişkenler ve hedef değişken olarak ayırın
X = data[features]
y = data[target]

# Eğitim ve test veri setlerini oluşturun
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Farklı sınıflandırma modellerini tanımlayın
rf_model = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')
gb_model = GradientBoostingClassifier(random_state=42)
knn_model = KNeighborsClassifier()

# Ensemble modelini oluşturun
ensemble_model = VotingClassifier(estimators=[
    ('Random Forest', rf_model),
    ('Gradient Boosting', gb_model),
    ('K-Nearest Neighbors', knn_model)
], voting='soft')

# Ensemble modelini eğitin
ensemble_model.fit(X_train, y_train)

# Test veri seti üzerinde tahminler yapın
y_pred_ensemble = ensemble_model.predict(X_test)

# Model performansını değerlendirin
accuracy_ensemble = accuracy_score(y_test, y_pred_ensemble)
classification_rep_ensemble = classification_report(y_test, y_pred_ensemble)

# Sonuçları görüntüle
print('Ensemble Model Accuracy:', accuracy_ensemble)
print('Ensemble Model Classification Report:\n', classification_rep_ensemble)

# Her bir cinsiyet için tahmin edilen hastalıkları ve en çok tahmin edilen hastalıkları bul
female_indices = X_test[y_test == 0].index
male_indices = X_test[y_test == 1].index

female_predictions = pd.Series(ensemble_model.predict(X_test.loc[female_indices]), name="Predicted_Disease")
male_predictions = pd.Series(ensemble_model.predict(X_test.loc[male_indices]), name="Predicted_Disease")

# Kadınlar için en çok ölünen hastalıkları bul
female_most_common_disease = data.loc[female_indices, features].apply(lambda row: row.idxmax(), axis=1)
female_most_common_disease_count = female_most_common_disease.value_counts()

# Erkekler için en çok ölünen hastalıkları bul
male_most_common_disease = data.loc[male_indices, features].apply(lambda row: row.idxmax(), axis=1)
male_most_common_disease_count = male_most_common_disease.value_counts()

# Kadınlar için doğruluk oranını hesapla
percentage_correct_female = (female_most_common_disease_count[female_most_common_disease.mode().iloc[0]] / len(female_most_common_disease)) * 100

# Erkekler için doğruluk oranını hesapla
percentage_correct_male = (male_most_common_disease_count[male_most_common_disease.mode().iloc[0]] / len(male_most_common_disease)) * 100

# Sonuçları ekrana yazdır (devamı)
print("\nKadınlar İçin En Çok Ölünen Hastalık:", female_most_common_disease.mode().iloc[0])

print("\nErkekler İçin En Çok Ölünen Hastalık:", male_most_common_disease.mode().iloc[0])





import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc

# Hedef değişken olarak "AgeGroup" sütununu seçin
target = 'AgeGroup'

# Veri setinizdeki bağımsız değişkenleri ve hedef değişkeni seçin
features = ['Septicemia (A40-A41)', 'Malignant neoplasms (C00-C97)',
            'Diabetes mellitus (E10-E14)', 'Alzheimer disease (G30)', 'Influenza and pneumonia (J09-J18)',
            'Chronic lower respiratory diseases (J40-J47)',
            'Other diseases of respiratory system (J00-J06,J30-J39,J67,J70-J98)',
            'Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)',
            'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)',
            'Diseases of heart (I00-I09,I11,I13,I20-I51)', 'Cerebrovascular diseases (I60-I69)',
            'COVID-19 (U071, Multiple Cause of Death)', 'COVID-19 (U071, Underlying Cause of Death)']

# Gerekli düzenlemeleri yapın (eğer kategorik değişkenler varsa, bunları uygun şekilde kodlayın)

# X (bağımsız değişkenler) ve y (hedef değişken) oluşturun
X = data[features]
y = data[target]

# Eğitim ve test veri setlerini oluşturun
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# KNN modelini oluşturun ve eğitin
knn_model = KNeighborsClassifier(n_neighbors=5)

# XGBoost modelini oluşturun ve eğitin
xgb_model = XGBClassifier()

# VotingClassifier'ı oluşturun
voting_model = VotingClassifier(estimators=[
    ('KNN', knn_model),
    ('XGBoost', xgb_model)
], voting='soft')

# VotingClassifier'ı eğitin
voting_model.fit(X_train, y_train)

# Test veri seti üzerinde tahminler yapın
y_pred_voting = voting_model.predict(X_test)

# Model performansını değerlendirin
accuracy_voting = accuracy_score(y_test, y_pred_voting)
classification_report_voting = classification_report(y_test, y_pred_voting)

print(f'Voting Model Accuracy: {accuracy_voting}')
print('Voting Model Classification Report:\n', classification_report_voting)

from sklearn.metrics import confusion_matrix
import seaborn as sns

conf_matrix = confusion_matrix(y_test, y_pred_voting)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()


# Her yaş grubu için modelin doğruluğunu gösteren bir çubuk grafik oluşturun
age_groups = data['AgeGroup'].unique()
accuracies = []

for age_group in age_groups:
    age_group_indices = X_test[X_test.index.isin(data[data['AgeGroup'] == age_group].index)].index
    y_test_age_group = y_test[y_test.index.isin(age_group_indices)]
    y_pred_age_group = y_pred_voting[y_test.index.isin(age_group_indices)]

    accuracy_age_group = accuracy_score(y_test_age_group, y_pred_age_group)
    accuracies.append(accuracy_age_group)

# Çubuk grafik oluştur
plt.figure(figsize=(10, 6))
plt.bar(age_groups, accuracies, color='skyblue')
plt.xlabel('Age Group')
plt.ylabel('Accuracy')
plt.title('Model Accuracy for Each Age Group')
plt.show()

# ölüm olaylarının başlangıç ve bitiş tarihleri arasındaki gün sayısını ("DeathDurationInDays") ve çeşitli hastalıkların neden olduğu ölüm sayılarını içeren belirli sütunlar arasındaki korelasyonu incelemektedir

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# Gün sayısını hesaplamak için yeni bir sütun ekleyin
data['Start Date'] = pd.to_datetime(data['Start Date'])
data['End Date'] = pd.to_datetime(data['End Date'])
data['DeathDurationInDays'] = (data['End Date'] - data['Start Date']).dt.days

# Gerekli sütunları seçme
selected_columns = ['DeathDurationInDays', 'DeathDurationInDays','Sex','Septicemia (A40-A41)', 'Malignant neoplasms (C00-C97)', 'Diabetes mellitus (E10-E14)', 'Alzheimer disease (G30)', 'Influenza and pneumonia (J09-J18)', 'Chronic lower respiratory diseases (J40-J47)', 'Other diseases of respiratory system (J00-J06,J30-J39,J67,J70-J98)', 'Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)', 'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)', 'Diseases of heart (I00-I09,I11,I13,I20-I51)', 'Cerebrovascular diseases (I60-I69)', 'COVID-19 (U071, Multiple Cause of Death)', 'COVID-19 (U071, Underlying Cause of Death)']

# Korelasyon matrisini oluşturma
correlation_matrix = data[selected_columns].corr()

# Korelasyon matrisini görselleştirme
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Korelasyon Matrisi')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Modellerin adları
models = ['CatBoost', 'Ensemble Model', 'Voting Model']

# Modellerin doğruluk skorları
accuracies = [accuracy_catboost, accuracy_ensemble, accuracy_voting]

# Çubuk grafik oluştur
plt.figure(figsize=(10, 6))
sns.barplot(x=models, y=accuracies, palette='viridis')
plt.ylabel('Accuracy')
plt.title('Model Comparison')
plt.show()